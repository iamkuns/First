/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.86
 * Generated at: 2024-09-17 11:25:06 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class map_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("  <head>\r\n");
      out.write("    <title>Place Autocomplete</title>\r\n");
      out.write("    <meta name=\"viewport\" content=\"initial-scale=1.0, user-scalable=no\">\r\n");
      out.write("    <meta charset=\"utf-8\">\r\n");
      out.write("    <style>\r\n");
      out.write("      /* Always set the map height explicitly to define the size of the div\r\n");
      out.write("       * element that contains the map. */\r\n");
      out.write("      #map {\r\n");
      out.write("        height: 100%;\r\n");
      out.write("      }\r\n");
      out.write("      /* Optional: Makes the sample page fill the window. */\r\n");
      out.write("      html, body {\r\n");
      out.write("        height: 100%;\r\n");
      out.write("        margin: 0;\r\n");
      out.write("        padding: 0;\r\n");
      out.write("      }\r\n");
      out.write("      .controls {\r\n");
      out.write("        margin-top: 10px;\r\n");
      out.write("        border: 1px solid transparent;\r\n");
      out.write("        border-radius: 2px 0 0 2px;\r\n");
      out.write("        box-sizing: border-box;\r\n");
      out.write("        -moz-box-sizing: border-box;\r\n");
      out.write("        height: 32px;\r\n");
      out.write("        outline: none;\r\n");
      out.write("        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      #origin-input,\r\n");
      out.write("      #destination-input {\r\n");
      out.write("        background-color: #fff;\r\n");
      out.write("        font-family: Roboto;\r\n");
      out.write("        font-size: 15px;\r\n");
      out.write("        font-weight: 300;\r\n");
      out.write("        margin-left: 12px;\r\n");
      out.write("        padding: 0 11px 0 13px;\r\n");
      out.write("        text-overflow: ellipsis;\r\n");
      out.write("        width: 200px;\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      #origin-input:focus,\r\n");
      out.write("      #destination-input:focus {\r\n");
      out.write("        border-color: #4d90fe;\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      #mode-selector {\r\n");
      out.write("        color: #fff;\r\n");
      out.write("        background-color: #4d90fe;\r\n");
      out.write("        margin-left: 12px;\r\n");
      out.write("        padding: 5px 11px 0px 11px;\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      #mode-selector label {\r\n");
      out.write("        font-family: Roboto;\r\n");
      out.write("        font-size: 13px;\r\n");
      out.write("        font-weight: 300;\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("    </style>\r\n");
      out.write("  </head>\r\n");
      out.write("  <body>\r\n");
      out.write("    <input id=\"origin-input\" class=\"controls\" type=\"text\"\r\n");
      out.write("        placeholder=\"Enter an origin location\">\r\n");
      out.write("\r\n");
      out.write("    <input id=\"destination-input\" class=\"controls\" type=\"text\"\r\n");
      out.write("        placeholder=\"Enter a destination location\">\r\n");
      out.write("\r\n");
      out.write("    <div id=\"mode-selector\" class=\"controls\">\r\n");
      out.write("      <input type=\"radio\" name=\"type\" id=\"changemode-walking\" checked=\"checked\">\r\n");
      out.write("      <label for=\"changemode-walking\">Walking</label>\r\n");
      out.write("\r\n");
      out.write("      <input type=\"radio\" name=\"type\" id=\"changemode-transit\">\r\n");
      out.write("      <label for=\"changemode-transit\">Transit</label>\r\n");
      out.write("\r\n");
      out.write("      <input type=\"radio\" name=\"type\" id=\"changemode-driving\">\r\n");
      out.write("      <label for=\"changemode-driving\">Driving</label>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <div id=\"map\"></div>\r\n");
      out.write("\r\n");
      out.write("    <script>\r\n");
      out.write("      // This example requires the Places library. Include the libraries=places\r\n");
      out.write("      // parameter when you first load the API. For example:\r\n");
      out.write("      // <script src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places\">\r\n");
      out.write("\r\n");
      out.write("      function initMap() {\r\n");
      out.write("        var map = new google.maps.Map(document.getElementById('map'), {\r\n");
      out.write("          mapTypeControl: false,\r\n");
      out.write("          center: {lat: 18.573629, lng: 73.981731},\r\n");
      out.write("          zoom: 13\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        new AutocompleteDirectionsHandler(map);\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("       /**\r\n");
      out.write("        * @constructor\r\n");
      out.write("       */\r\n");
      out.write("      function AutocompleteDirectionsHandler(map) {\r\n");
      out.write("        this.map = map;\r\n");
      out.write("        this.originPlaceId = null;\r\n");
      out.write("        this.destinationPlaceId = null;\r\n");
      out.write("        this.travelMode = 'WALKING';\r\n");
      out.write("        var originInput = document.getElementById('origin-input');\r\n");
      out.write("        var destinationInput = document.getElementById('destination-input');\r\n");
      out.write("        var modeSelector = document.getElementById('mode-selector');\r\n");
      out.write("        this.directionsService = new google.maps.DirectionsService;\r\n");
      out.write("        this.directionsDisplay = new google.maps.DirectionsRenderer;\r\n");
      out.write("        this.directionsDisplay.setMap(map);\r\n");
      out.write("\r\n");
      out.write("        var originAutocomplete = new google.maps.places.Autocomplete(\r\n");
      out.write("            originInput, {placeIdOnly: true});\r\n");
      out.write("        var destinationAutocomplete = new google.maps.places.Autocomplete(\r\n");
      out.write("            destinationInput, {placeIdOnly: true});\r\n");
      out.write("\r\n");
      out.write("        this.setupClickListener('changemode-walking', 'WALKING');\r\n");
      out.write("        this.setupClickListener('changemode-transit', 'TRANSIT');\r\n");
      out.write("        this.setupClickListener('changemode-driving', 'DRIVING');\r\n");
      out.write("\r\n");
      out.write("        this.setupPlaceChangedListener(originAutocomplete, 'ORIG');\r\n");
      out.write("        this.setupPlaceChangedListener(destinationAutocomplete, 'DEST');\r\n");
      out.write("\r\n");
      out.write("        this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(originInput);\r\n");
      out.write("        this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(destinationInput);\r\n");
      out.write("        this.map.controls[google.maps.ControlPosition.TOP_LEFT].push(modeSelector);\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      // Sets a listener on a radio button to change the filter type on Places\r\n");
      out.write("      // Autocomplete.\r\n");
      out.write("      AutocompleteDirectionsHandler.prototype.setupClickListener = function(id, mode) {\r\n");
      out.write("        var radioButton = document.getElementById(id);\r\n");
      out.write("        var me = this;\r\n");
      out.write("        radioButton.addEventListener('click', function() {\r\n");
      out.write("          me.travelMode = mode;\r\n");
      out.write("          me.route();\r\n");
      out.write("        });\r\n");
      out.write("      };\r\n");
      out.write("\r\n");
      out.write("      AutocompleteDirectionsHandler.prototype.setupPlaceChangedListener = function(autocomplete, mode) {\r\n");
      out.write("        var me = this;\r\n");
      out.write("        autocomplete.bindTo('bounds', this.map);\r\n");
      out.write("        autocomplete.addListener('place_changed', function() {\r\n");
      out.write("          var place = autocomplete.getPlace();\r\n");
      out.write("          if (!place.place_id) {\r\n");
      out.write("            window.alert(\"Please select an option from the dropdown list.\");\r\n");
      out.write("            return;\r\n");
      out.write("          }\r\n");
      out.write("          if (mode === 'ORIG') {\r\n");
      out.write("            me.originPlaceId = place.place_id;\r\n");
      out.write("          } else {\r\n");
      out.write("            me.destinationPlaceId = place.place_id;\r\n");
      out.write("          }\r\n");
      out.write("          me.route();\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("      };\r\n");
      out.write("\r\n");
      out.write("      AutocompleteDirectionsHandler.prototype.route = function() {\r\n");
      out.write("        if (!this.originPlaceId || !this.destinationPlaceId) {\r\n");
      out.write("          return;\r\n");
      out.write("        }\r\n");
      out.write("        var me = this;\r\n");
      out.write("\r\n");
      out.write("        this.directionsService.route({\r\n");
      out.write("          origin: {'placeId': this.originPlaceId},\r\n");
      out.write("          destination: {'placeId': this.destinationPlaceId},\r\n");
      out.write("          travelMode: this.travelMode\r\n");
      out.write("        }, function(response, status) {\r\n");
      out.write("          if (status === 'OK') {\r\n");
      out.write("            me.directionsDisplay.setDirections(response);\r\n");
      out.write("          } else {\r\n");
      out.write("            window.alert('Directions request failed due to ' + status);\r\n");
      out.write("          }\r\n");
      out.write("        });\r\n");
      out.write("      };\r\n");
      out.write("\r\n");
      out.write("    </script>\r\n");
      out.write("    <script src=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDQz1IuA5l5xdybendg6ww0ShYirtUzPac&libraries=places&callback=initMap\"\r\n");
      out.write("        async defer></script>\r\n");
      out.write("  </body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!-- <!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("  <head>\r\n");
      out.write("    <meta name=\"viewport\" content=\"initial-scale=1.0, user-scalable=no\">\r\n");
      out.write("    <meta charset=\"utf-8\">\r\n");
      out.write("    <title>Places Searchbox</title>\r\n");
      out.write("    <style>\r\n");
      out.write("      /* Always set the map height explicitly to define the size of the div\r\n");
      out.write("       * element that contains the map. */\r\n");
      out.write("      #map {\r\n");
      out.write("        height: 100%;\r\n");
      out.write("      }\r\n");
      out.write("      /* Optional: Makes the sample page fill the window. */\r\n");
      out.write("      html, body {\r\n");
      out.write("        height: 100%;\r\n");
      out.write("        margin: 0;\r\n");
      out.write("        padding: 0;\r\n");
      out.write("      }\r\n");
      out.write("      #description {\r\n");
      out.write("        font-family: Roboto;\r\n");
      out.write("        font-size: 15px;\r\n");
      out.write("        font-weight: 300;\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      #infowindow-content .title {\r\n");
      out.write("        font-weight: bold;\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      #infowindow-content {\r\n");
      out.write("        display: none;\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      #map #infowindow-content {\r\n");
      out.write("        display: inline;\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      .pac-card {\r\n");
      out.write("        margin: 10px 10px 0 0;\r\n");
      out.write("        border-radius: 2px 0 0 2px;\r\n");
      out.write("        box-sizing: border-box;\r\n");
      out.write("        -moz-box-sizing: border-box;\r\n");
      out.write("        outline: none;\r\n");
      out.write("        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);\r\n");
      out.write("        background-color: #fff;\r\n");
      out.write("        font-family: Roboto;\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      #pac-container {\r\n");
      out.write("        padding-bottom: 12px;\r\n");
      out.write("        margin-right: 12px;\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      .pac-controls {\r\n");
      out.write("        display: inline-block;\r\n");
      out.write("        padding: 5px 11px;\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      .pac-controls label {\r\n");
      out.write("        font-family: Roboto;\r\n");
      out.write("        font-size: 13px;\r\n");
      out.write("        font-weight: 300;\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      #pac-input {\r\n");
      out.write("        background-color: #fff;\r\n");
      out.write("        font-family: Roboto;\r\n");
      out.write("        font-size: 15px;\r\n");
      out.write("        font-weight: 300;\r\n");
      out.write("        margin-left: 12px;\r\n");
      out.write("        padding: 0 11px 0 13px;\r\n");
      out.write("        text-overflow: ellipsis;\r\n");
      out.write("        width: 400px;\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      #pac-input:focus {\r\n");
      out.write("        border-color: #4d90fe;\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      #title {\r\n");
      out.write("        color: #fff;\r\n");
      out.write("        background-color: #4d90fe;\r\n");
      out.write("        font-size: 25px;\r\n");
      out.write("        font-weight: 500;\r\n");
      out.write("        padding: 6px 12px;\r\n");
      out.write("      }\r\n");
      out.write("      #target {\r\n");
      out.write("        width: 345px;\r\n");
      out.write("      }\r\n");
      out.write("    </style>\r\n");
      out.write("  </head>\r\n");
      out.write("  <body>\r\n");
      out.write("  <input id=\"pac-input\" class=\"controls\" type=\"text\" placeholder=\"Search Box\"><br>\r\n");
      out.write("    \r\n");
      out.write("    <div id=\"map\"></div>\r\n");
      out.write("    <script>\r\n");
      out.write("      \r\n");
      out.write("      function initAutocomplete() {\r\n");
      out.write("        var map = new google.maps.Map(document.getElementById('map'), {\r\n");
      out.write("          center: {lat: -33.8688, lng: 151.2195},\r\n");
      out.write("          zoom: 13,\r\n");
      out.write("          mapTypeId: 'roadmap'\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        // Create the search box and link it to the UI element.\r\n");
      out.write("        var input = document.getElementById('pac-input');\r\n");
      out.write("        var searchBox = new google.maps.places.SearchBox(input);\r\n");
      out.write("        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);\r\n");
      out.write("\r\n");
      out.write("        // Bias the SearchBox results towards current map's viewport.\r\n");
      out.write("        map.addListener('bounds_changed', function() {\r\n");
      out.write("          searchBox.setBounds(map.getBounds());\r\n");
      out.write("        });\r\n");
      out.write("\r\n");
      out.write("        var markers = [];\r\n");
      out.write("        // Listen for the event fired when the user selects a prediction and retrieve\r\n");
      out.write("        // more details for that place.\r\n");
      out.write("        searchBox.addListener('places_changed', function() {\r\n");
      out.write("          var places = searchBox.getPlaces();\r\n");
      out.write("\r\n");
      out.write("          if (places.length == 0) {\r\n");
      out.write("            return;\r\n");
      out.write("          }\r\n");
      out.write("\r\n");
      out.write("          // Clear out the old markers.\r\n");
      out.write("          markers.forEach(function(marker) {\r\n");
      out.write("            marker.setMap(null);\r\n");
      out.write("          });\r\n");
      out.write("          markers = [];\r\n");
      out.write("\r\n");
      out.write("          // For each place, get the icon, name and location.\r\n");
      out.write("          var bounds = new google.maps.LatLngBounds();\r\n");
      out.write("          places.forEach(function(place) {\r\n");
      out.write("            if (!place.geometry) {\r\n");
      out.write("              console.log(\"Returned place contains no geometry\");\r\n");
      out.write("              return;\r\n");
      out.write("            }\r\n");
      out.write("            var icon = {\r\n");
      out.write("              url: place.icon,\r\n");
      out.write("              size: new google.maps.Size(71, 71),\r\n");
      out.write("              origin: new google.maps.Point(0, 0),\r\n");
      out.write("              anchor: new google.maps.Point(17, 34),\r\n");
      out.write("              scaledSize: new google.maps.Size(25, 25)\r\n");
      out.write("            };\r\n");
      out.write("\r\n");
      out.write("            // Create a marker for each place.\r\n");
      out.write("            markers.push(new google.maps.Marker({\r\n");
      out.write("              map: map,\r\n");
      out.write("              icon: icon,\r\n");
      out.write("              title: place.name,\r\n");
      out.write("              position: place.geometry.location\r\n");
      out.write("            }));\r\n");
      out.write("\r\n");
      out.write("            if (place.geometry.viewport) {\r\n");
      out.write("              // Only geocodes have viewport.\r\n");
      out.write("              bounds.union(place.geometry.viewport);\r\n");
      out.write("            } else {\r\n");
      out.write("              bounds.extend(place.geometry.location);\r\n");
      out.write("            }\r\n");
      out.write("          });\r\n");
      out.write("          map.fitBounds(bounds);\r\n");
      out.write("        });\r\n");
      out.write("      }\r\n");
      out.write("      \r\n");
      out.write("\r\n");
      out.write("    </script>\r\n");
      out.write("    <script src=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyCKDz2le7flatBRk2tlKSPHQkWOb-JnIaM&libraries=places&callback=initAutocomplete\"\r\n");
      out.write("         async defer></script>\r\n");
      out.write("  </body>\r\n");
      out.write("</html> -->");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
